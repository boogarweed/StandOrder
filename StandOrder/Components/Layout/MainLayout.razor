@inherits LayoutComponentBase
@using StandOrder.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory

@*
    This CascadingValue shares the 'searchState' object with all child components,
    including NavMenu and ProductSearchModal. This is a more robust way to manage state.
*@
<CascadingValue Value="searchState">
    <div class="page">
        <div class="sidebar">
            @* The NavMenu no longer needs any parameters *@
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

    @* The modal now gets its state from the CascadingValue *@
    <ProductSearchModal />
</CascadingValue>


@code {
    private SearchState searchState;

    protected override void OnInitialized()
    {
        // Initialize the state container and provide a way for it to trigger UI updates.
        searchState = new SearchState(DbFactory, () => InvokeAsync(StateHasChanged));
    }

    // This class holds all the state and logic for the product search feature.
    public class SearchState
    {
        private readonly IDbContextFactory<AppDbContext> _dbFactory;
        private readonly Func<Task> _updateView;

        public bool IsVisible { get; private set; }
        public List<ProductSearchModal.ProductSearchResult> SearchResults { get; private set; } = new();

        public SearchState(IDbContextFactory<AppDbContext> dbFactory, Func<Task> updateView)
        {
            _dbFactory = dbFactory;
            _updateView = updateView;
        }

        public async Task PerformSearchAsync(string searchTerm)
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                return;
            }

            await using var db = _dbFactory.CreateDbContext();
            var currentYear = DateTime.Now.Year.ToString();

            SearchResults = await db.Products
                .Where(p => p.ProductYear == currentYear && p.ProductName.Contains(searchTerm))
                .Select(p => new ProductSearchModal.ProductSearchResult
                {
                    ProductName = p.ProductName,
                    WarehouseLocation = p.WarehouseLocation
                })
                .OrderBy(p => p.ProductName)
                .Take(50)
                .ToListAsync();

            IsVisible = true;
            await _updateView(); // This tells the MainLayout to re-render and show the modal.
        }

        public async Task CloseModalAsync()
        {
            IsVisible = false;
            SearchResults = new();
            await _updateView(); // This tells the MainLayout to re-render and hide the modal.
        }
    }
}