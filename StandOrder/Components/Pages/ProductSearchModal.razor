@using StandOrder.Models
@using static StandOrder.Components.Layout.MainLayout


@* The modal now receives its state from the cascading parameter *@
@if (SearchState?.IsVisible == true)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Product Search Results</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    @if (SearchState.SearchResults == null || !SearchState.SearchResults.Any())
                    {
                        <p>No products found for your search term.</p>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var result in SearchState.SearchResults)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@result.ProductName</span>
                                    <span class="badge bg-secondary rounded-pill">@result.WarehouseLocation</span>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [CascadingParameter]
    private SearchState SearchState { get; set; }

    // A simple class to hold the data for the search results.
    public class ProductSearchResult
    {
        public string ProductName { get; set; }
        public string WarehouseLocation { get; set; }
    }

    private async Task Close()
    {
        if (SearchState != null)
        {
            await SearchState.CloseModalAsync();
        }
    }
}
