@page "/orders-to-be-pulled"
@using StandOrder.Data
@using Microsoft.EntityFrameworkCore
@inject MyAppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Orders to be Pulled</PageTitle>

<h1>Orders to be Pulled</h1>

@if (ordersToDisplay == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Order Type</th>
                <th>Status</th>
                <th>Pickup Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in ordersToDisplay)
            {
                <tr>
                    <td>@order.CustomerName</td>
                    <td>@order.OrderType</td>
                    <td>@order.Status</td>
                    <td>@order.PickUpTime?.ToString("g")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => PullOrder(order.OrdersTakenID)">Pull Order</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<OrderDisplayModel> ordersToDisplay;

    // A temporary class to hold the data we need for the view
    public class OrderDisplayModel
    {
        public int OrdersTakenID { get; set; }
        public string CustomerName { get; set; }
        public string OrderType { get; set; }
        public string Status { get; set; }
        public DateTime? PickUpTime { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentYear = DateTime.Now.Year.ToString();

        ordersToDisplay = await DbContext.OrdersTaken
            .Where(o => o.OrderYear == currentYear &&
                       (o.Status == "Taken" || o.Status == "BackOrder"))  // <‑‑ no array .Contains
            .Join(DbContext.Customers,
                  o => o.CustomerID,
                  c => c.CustomerID,
                  (o, c) => new OrderDisplayModel
                  {
                      OrdersTakenID = o.OrdersTakenID,
                      CustomerName = c.FullName,
                      OrderType = o.TypeOrder,
                      Status = o.Status,
                      PickUpTime = o.PickUpTime
                  })
            .OrderBy(r => r.PickUpTime)
            .AsNoTracking()
            .ToListAsync();
    }


    private void PullOrder(int ordersTakenId)
    {
        NavigationManager.NavigateTo($"/pull-order/{ordersTakenId}");
    }
}