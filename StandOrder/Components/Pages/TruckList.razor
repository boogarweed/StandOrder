@page "/trucks"
@using StandOrder.Models
@inject TruckDataService DataService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h3>Truck Receipts 🚚</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label for="year-select" class="form-label">Select Year</label>
        <InputSelect id="year-select" class="form-select" @bind-Value="SelectedYear">
            @foreach (var year in AvailableYears)
            {
                <option value="@year">@year</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-9 align-self-end text-end">
        <button class="btn btn-primary" @onclick="AddNewTruck">
            <i class="oi oi-plus"></i> Add New Truck
        </button>
    </div>
</div>

@if (trucks == null)
{
    <p><em>Loading trucks...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Truck ID</th>
                <th>Supplier</th>
                <th>Received Date</th>
                <th style="width: 250px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var truck in trucks)
            {
                <tr>
                    <td>@truck.TruckID</td>
                    <td>@truck.Supplier?.SupplierName</td>
                    <td>@truck.ReceivedDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ViewDetails(truck.TruckID)">Details</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditTruck(truck)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTruck(truck.TruckID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@editingTruck" OnValidSubmit="SaveChanges">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingTruck.TruckID == 0 ? "Add" : "Edit") Truck</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Supplier</label>
                            <InputSelect class="form-select" @bind-Value="editingTruck.SupplierID">
                                <option value="0">-- Select Supplier --</option>
                                @foreach (var supplier in suppliers)
                                {
                                    <option value="@supplier.SupplierID">@supplier.SupplierName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingTruck.SupplierID)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Received Date</label>
                            <InputDate class="form-control" @bind-Value="editingTruck.ReceivedDate" />
                            <ValidationMessage For="@(() => editingTruck.ReceivedDate)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private List<Truck> trucks;
    private List<Supplier> suppliers = new();
    private Truck editingTruck;
    private bool showModal = false;

    public List<int> AvailableYears { get; set; } = Enumerable.Range(DateTime.Now.Year - 5, 6).Reverse().ToList();

    private int _selectedYear = DateTime.Now.Year;
    public int SelectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                LoadTrucks();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrucks();
        suppliers = await DataService.GetSuppliersAsync();
    }

    private async Task LoadTrucks()
    {
        trucks = await DataService.GetTrucksByYearAsync(SelectedYear);
        StateHasChanged();
    }

    private void AddNewTruck()
    {
        editingTruck = new Truck() { ReceivedDate = DateTime.Today };
        showModal = true;
    }

    private void EditTruck(Truck truckToEdit)
    {
        // Create a copy to avoid modifying the list directly
        editingTruck = new Truck
        {
            TruckID = truckToEdit.TruckID,
            SupplierID = truckToEdit.SupplierID,
            ReceivedDate = truckToEdit.ReceivedDate
        };
        showModal = true;
    }

    private async Task SaveChanges()
    {
        if (editingTruck.TruckID == 0) // It's a new truck
        {
            await DataService.AddTruckAsync(editingTruck);
        }
        else // It's an existing truck
        {
            await DataService.UpdateTruckAsync(editingTruck);
        }
        CloseModal();
        await LoadTrucks();
    }

    private async Task DeleteTruck(int truckId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Truck ID: {truckId}?");
        if (confirmed)
        {
            await DataService.DeleteTruckAsync(truckId);
            await LoadTrucks();
        }
    }

    private void ViewDetails(int truckId)
    {
        NavManager.NavigateTo($"/truckdetails/{truckId}");
    }

    private void CloseModal() => showModal = false;
}