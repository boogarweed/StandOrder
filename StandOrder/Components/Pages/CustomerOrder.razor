@rendermode InteractiveServer
@page "/customer-order"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using System.Text
@using System.Collections.Concurrent
@inject IDbContextFactory<MyAppDbContext> DbFactory
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Walk Through Order</h3>

<div class="p-3">
    <EditForm Model="@order" OnValidSubmit="HandleSubmit">
        <div class="form-group mb-2">
            <label>Customer:</label>
            <select class="form-control" @bind="selectedCustomerId" disabled="@(isBusy || draftOrderId != null)">
                <option value="">-- Select Customer --</option>
                @foreach (var c in customers)
                {
                    <option value="@c.ID">@c.Name</option>
                }
            </select>
        </div>

        <div class="form-group mb-2">
            <label>Order Type:</label>
            <InputRadioGroup @bind-Value="order.TypeOrder">
                <InputRadio Value=@("Case") /> Case
                <InputRadio Value=@("Broken") /> Broken
            </InputRadioGroup>
        </div>

        <div class="form-group mb-2">
            <label>Quantity:</label>
            <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
        </div>

        <div class="form-group mb-3">
            <label>Scan Barcode:</label>
            <input class="form-control"
                   @ref="barcodeInput"
                   @onkeydown="HandleScannerInput"
                   @onkeydown:preventDefault="true" />
            @if (QueuedScanCount > 0)
            {
                <small class="form-text text-muted">Processing... (@QueuedScanCount in queue)</small>
            }
        </div>

        <h4>Order Items</h4>
        <ul class="list-group mb-3">
            @foreach (var item in orderDetails)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="d-flex flex-column">
                        <span class="fw-bold">@item.ProductName</span>
                        <small class="text-muted">ID: @item.ProductID</small>
                    </div>
                    <div>
                        <span class="badge bg-primary rounded-pill me-2">
                            @item.QuantityOrdered
                        </span>
                        <button type="button" class="btn btn-sm btn-danger"
                                @onclick="() => RemoveProduct(item)" disabled="@isBusy">
                            Remove
                        </button>
                    </div>
                </li>
            }
        </ul>

        <button type="submit" class="btn btn-success" disabled="@isBusy">
            Submit Order
        </button>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusMessageClass mt-3">@statusMessage</div>
}

@if (showProductSelectionModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Multiple Products Found</h5>
                    <button type="button" class="btn-close" @onclick="CancelProductSelection" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please select the correct product for barcode '<strong>@scannedBarcode</strong>':</p>
                    <div class="list-group">
                        @foreach (var product in productsForSelection)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectProductFromModal(product)">
                                @product.ProductName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script>
    window.standOrderStorage = {
      getCustomerOrderId: () => localStorage.getItem('customerOrderId'),
      setCustomerOrderId: (id) => localStorage.setItem('customerOrderId', id),
      clearCustomerOrderId: () => localStorage.removeItem('customerOrderId')
    };

    window.clearBarcodeInput = (el) => { if(el) { el.value = ''; } };
</script>

@code {
    // Local ViewModel for display purposes
    public class CustomerOrderDetailViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityOrdered { get; set; }
    }

    // DTO for dropdown binding
    private class CustomerDto
    {
        public int ID { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class OrderInput
    {
        public string TypeOrder { get; set; } = "Case";
    }

    // Component State
    List<CustomerDto> customers = new();
    int? selectedCustomerId;
    OrderInput order = new();
    string scannedBarcode = string.Empty;
    int currentQuantity = 1;
    List<CustomerOrderDetailViewModel> orderDetails = new();
    ElementReference barcodeInput;
    string statusMessage = string.Empty;
    string statusMessageClass = "alert-info";
    bool isBusy = false;
    int? draftOrderId;
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();
    StringBuilder _scanBuffer = new();

    // --- Queueing and Background Processing State ---
    private readonly ConcurrentQueue<(string Barcode, int Quantity)> _scanQueue = new();
    private readonly CancellationTokenSource _cts = new();
    private Task? _processingTask;
    private SemaphoreSlim _signal = new SemaphoreSlim(0);
    private (string Barcode, int Quantity)? _pendingSelectionScan;
    public int QueuedScanCount => _scanQueue.Count;

    protected override async Task OnInitializedAsync()
    {
        await using var db = DbFactory.CreateDbContext();
        customers = await db.Customers
            .Where(c => c.FullName != null)
            .OrderBy(c => c.FullName)
            .Select(c => new CustomerDto { ID = c.CustomerID, Name = c.FullName! })
            .ToListAsync();

        // Start the background processing task
        _processingTask = ProcessScanQueueAsync(_cts.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();
            var stored = await JS.InvokeAsync<string>("standOrderStorage.getCustomerOrderId");
            if (int.TryParse(stored, out var oid))
            {
                isBusy = true;
                await InvokeAsync(StateHasChanged);
                try { await LoadDraftOrder(oid); }
                finally
                {
                    isBusy = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task LoadDraftOrder(int orderId)
    {
        await using var db = DbFactory.CreateDbContext();
        var draftOrder = await db.OrdersTaken.AsNoTracking().FirstOrDefaultAsync(o => o.OrdersTakenID == orderId);
        if (draftOrder != null)
        {
            draftOrderId = orderId;
            selectedCustomerId = draftOrder.CustomerID;
            order.TypeOrder = draftOrder.TypeOrder;

            var detailData = await db.OrdersTakenDetails.AsNoTracking()
                .Where(d => d.OrdersTakenID == orderId)
                .Join(db.Products, d => d.ProductID, p => p.ProductID, (d, p) => new { d.ProductID, p.ProductName, d.QuantityOrdered })
                .ToListAsync();

            orderDetails = detailData.Select(d => new CustomerOrderDetailViewModel
            {
                ProductID = d.ProductID,
                ProductName = d.ProductName ?? "[Product Not Found]",
                QuantityOrdered = d.QuantityOrdered
            }).ToList();
        }
        else
        {
            await JS.InvokeVoidAsync("standOrderStorage.clearCustomerOrderId");
        }
    }

    private async Task HandleScannerInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var code = _scanBuffer.ToString();
            _scanBuffer.Clear();
            await JS.InvokeVoidAsync("clearBarcodeInput", barcodeInput);

            if (string.IsNullOrWhiteSpace(code)) return;

            if (selectedCustomerId == null)
            {
                statusMessage = "Please select a customer before scanning.";
                statusMessageClass = "alert-warning";
                return;
            }

            _scanQueue.Enqueue((code, currentQuantity));
            _signal.Release();

            ResetForNextScan();
            await barcodeInput.FocusAsync();
        }
        else if (e.Key.Length == 1)
        {
            _scanBuffer.Append(e.Key);
        }
    }

    private async Task ProcessScanQueueAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await _signal.WaitAsync(token);
            if (token.IsCancellationRequested) break;

            while (_scanQueue.TryDequeue(out var scan))
            {
                isBusy = true;
                await InvokeAsync(StateHasChanged);
                try { await ProcessSingleScan(scan); }
                catch (Exception ex)
                {
                    statusMessage = $"Error processing {scan.Barcode}: {ex.Message}";
                    statusMessageClass = "alert-danger";
                }
                finally
                {
                    if (!showProductSelectionModal)
                    {
                        isBusy = false;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        }
    }

    private async Task ProcessSingleScan((string Barcode, int Quantity) scan)
    {
        statusMessage = "";
        scannedBarcode = scan.Barcode;

        if (draftOrderId == null)
        {
            await CreateDraftOrderAsync();
        }

        await using var db = DbFactory.CreateDbContext();
        var year = DateTime.Now.Year.ToString();
        var matchingProducts = await (
            from b in db.Barcodes
            join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
            where b.BarCode == scan.Barcode && p.ProductYear == year
            select p
        ).ToListAsync();

        if (matchingProducts.Count == 1)
        {
            await AddProductToOrder(matchingProducts.First(), scan.Quantity);
        }
        else if (matchingProducts.Count > 1)
        {
            _pendingSelectionScan = scan;
            productsForSelection = matchingProducts;
            showProductSelectionModal = true;
        }
        else
        {
            statusMessage = $"Product not found for '{scan.Barcode}'.";
            statusMessageClass = "alert-warning";
        }
    }

    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        if (_pendingSelectionScan.HasValue)
        {
            await AddProductToOrder(product, _pendingSelectionScan.Value.Quantity);
            _pendingSelectionScan = null;
        }
        isBusy = false;
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        _pendingSelectionScan = null;
        isBusy = false;
        statusMessage = "Scan canceled.";
        statusMessageClass = "alert-info";
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CreateDraftOrderAsync()
    {
        await using var db = DbFactory.CreateDbContext();
        var customer = await db.Customers.FindAsync(selectedCustomerId!.Value);
        var entity = new OrdersTaken
        {
            CustomerID = selectedCustomerId.Value,
            Status = "Draft",
            OrderYear = DateTime.Now.Year.ToString(),
            TypeOrder = order.TypeOrder,
            LastName = customer?.FullName,
            TimeTaken = DateTime.Now
        };

        db.OrdersTaken.Add(entity);
        await db.SaveChangesAsync();

        draftOrderId = entity.OrdersTakenID;
        await JS.InvokeVoidAsync("standOrderStorage.setCustomerOrderId", draftOrderId.Value);
    }

    async Task AddProductToOrder(Product product, int quantityToAdd)
    {
        await using var db = DbFactory.CreateDbContext();
        db.Products.Attach(product);

        decimal quantityToAdjust = (order.TypeOrder == "Broken")
            ? (decimal)quantityToAdd / (product.PacksPerCase ?? 1)
            : quantityToAdd;

        product.QtyInStock -= quantityToAdjust;

        var existing = orderDetails.FirstOrDefault(x => x.ProductID == product.ProductID);
        if (existing != null)
        {
            existing.QuantityOrdered += quantityToAdd;
            await db.Database.ExecuteSqlInterpolatedAsync($"UPDATE OrdersTakenDetails SET QuantityOrdered = {existing.QuantityOrdered}, QuantityPulled = {existing.QuantityOrdered} WHERE OrdersTakenID = {draftOrderId} AND ProductID = {product.ProductID}");
            statusMessage = $"Updated {product.ProductName ?? "[No Name]"}: qty {existing.QuantityOrdered}";
        }
        else
        {
            var newItem = new CustomerOrderDetailViewModel { ProductID = product.ProductID, ProductName = product.ProductName ?? "[No Name]", QuantityOrdered = quantityToAdd };
            orderDetails.Insert(0, newItem);
            await db.Database.ExecuteSqlInterpolatedAsync($"INSERT INTO OrdersTakenDetails (OrdersTakenID, ProductID, QuantityOrdered, QuantityPulled) VALUES ({draftOrderId}, {product.ProductID}, {quantityToAdd}, {quantityToAdd})");
            statusMessage = $"Added {product.ProductName ?? "[No Name]"}";
        }
        statusMessageClass = "alert-success";
        await db.SaveChangesAsync();
    }

    void ResetForNextScan()
    {
        scannedBarcode = "";
        currentQuantity = 1;
    }

    async Task RemoveProduct(CustomerOrderDetailViewModel item)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await using var db = DbFactory.CreateDbContext();
            var product = await db.Products.FindAsync(item.ProductID);
            if (product != null)
            {
                decimal quantityToReverse = (order.TypeOrder == "Broken")
                    ? (decimal)item.QuantityOrdered / (product.PacksPerCase ?? 1)
                    : item.QuantityOrdered;
                product.QtyInStock += quantityToReverse;
                await db.SaveChangesAsync();
            }
            orderDetails.Remove(item);
            if (draftOrderId != null)
            {
                await db.Database.ExecuteSqlInterpolatedAsync($"DELETE FROM OrdersTakenDetails WHERE OrdersTakenID = {draftOrderId} AND ProductID = {item.ProductID}");
            }
        }
        finally { isBusy = false; }
    }

    async Task HandleSubmit()
    {
        if (draftOrderId == null)
        {
            statusMessage = "No order started. Please scan an item.";
            return;
        }

        isBusy = true;
        await using var db = DbFactory.CreateDbContext();
        var entityToUpdate = await db.OrdersTaken.FindAsync(draftOrderId.Value);
        if (entityToUpdate != null)
        {
            entityToUpdate.Status = "Pulled";
            await db.SaveChangesAsync();
            statusMessage = $"Order saved (ID: {draftOrderId.Value})";
        }

        await JS.InvokeVoidAsync("standOrderStorage.clearCustomerOrderId");
        draftOrderId = null;
        selectedCustomerId = null;
        order = new OrderInput();
        orderDetails.Clear();
        ResetForNextScan();
        isBusy = false;
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _signal.Release();
        if (_processingTask != null)
        {
            await _processingTask;
        }
        _cts.Dispose();
        _signal.Dispose();
    }
}