@page "/inventory"
@rendermode InteractiveServer
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@inject MyAppDbContext db
@inject IJSRuntime JS

<h3>Inventory Adjustment</h3>

<div class="p-3 col-md-6">
    <!-- Case Quantity -->
    <div class="form-group mb-2">
        <label>Case Quantity:</label>
        <input type="number" class="form-control" @ref="caseQuantityInput" @bind="caseQuantity" disabled="@isBusy" placeholder="Enter case quantity" />
    </div>

    <!-- Pack Quantity -->
    <div class="form-group mb-2">
        <label>Pack Quantity:</label>
        <input type="number" class="form-control" @bind="packQuantity" disabled="@isBusy" placeholder="Enter pack quantity" />
    </div>

    <!-- Barcode scan -->
    <div class="form-group mb-3">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @bind="scannedBarcode"
               @bind:event="oninput"
               @onkeydown="HandleBarcodeKeyDown"
               @ref="barcodeInput"
               disabled="@isBusy" />
    </div>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(isError ? "alert-danger" : "alert-info") mt-3 col-md-6">@statusMessage</div>
}

<!-- Product Selection Modal -->
@if (showProductSelectionModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Multiple Products Found</h5>
                    <button type="button" class="btn-close" @onclick="CancelProductSelection" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please select the correct product for barcode '<strong>@scannedBarcode</strong>':</p>
                    <div class="list-group">
                        @foreach (var product in productsForSelection)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectProductFromModal(product)">
                                @product.ProductName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Scanning state
    string scannedBarcode = "";
    int? caseQuantity = null;
    int? packQuantity = null;
    ElementReference barcodeInput;
    ElementReference caseQuantityInput;
    bool isBusy = false;
    string statusMessage = "";
    bool isError = false;

    // New state for handling multiple products
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await caseQuantityInput.FocusAsync();
        }
    }

    async Task HandleBarcodeKeyDown(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" || isBusy)
            return;

        isBusy = true;
        isError = false;
        StateHasChanged();

        try
        {
            if ((caseQuantity == null || caseQuantity < 0) && (packQuantity == null || packQuantity < 0))
            {
                statusMessage = "Please enter a valid Case or Pack quantity before scanning.";
                isError = true;
                return;
            }

            var code = (scannedBarcode ?? "").Trim();
            if (string.IsNullOrEmpty(code)) return;

            var matchingProducts = await (
                from b in db.Barcodes
                join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
                where b.BarCode == code
                   && p.ProductYear == DateTime.Now.Year.ToString()
                select p
            ).ToListAsync();

            if (matchingProducts.Count == 1)
            {
                await AdjustInventoryForProduct(matchingProducts.First());
                await ResetInputsAndFocus();
            }
            else if (matchingProducts.Count > 1)
            {
                productsForSelection = matchingProducts;
                showProductSelectionModal = true;
                // UI remains busy until a selection is made from the modal
            }
            else
            {
                statusMessage = $"Product not found for barcode '{code}'.";
                isError = true;
                await ResetInputsAndFocus();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
            isError = true;
        }
        finally
        {
            if (!showProductSelectionModal)
            {
                isBusy = false;
                StateHasChanged();
            }
        }
    }

    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        productsForSelection.Clear();

        try
        {
            await AdjustInventoryForProduct(product);
        }
        catch (Exception ex)
        {
            statusMessage = $"An error occurred: {ex.Message}";
            isError = true;
        }
        finally
        {
            await ResetInputsAndFocus();
            isBusy = false;
            StateHasChanged();
        }
    }

    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        productsForSelection.Clear();
        await ResetInputsAndFocus();
        isBusy = false;
        StateHasChanged();
    }

    async Task AdjustInventoryForProduct(Product product)
    {
        // Attach the product instance to the current DbContext to be tracked.
        db.Products.Attach(product);

        decimal totalQuantity = 0;
        totalQuantity += caseQuantity ?? 0;

        if (packQuantity.HasValue && packQuantity > 0)
        {
            if (product.PacksPerCase.HasValue && product.PacksPerCase > 0)
            {
                totalQuantity += (decimal)packQuantity.Value / product.PacksPerCase.Value;
            }
            else
            {
                statusMessage = $"Product '{product.ProductName}' does not have a valid 'PacksPerCase' value.";
                isError = true;
                return;
            }
        }

        product.QtyInStock = totalQuantity;
        await db.SaveChangesAsync();

        statusMessage = $"Successfully set '{product.ProductName}' quantity to {product.QtyInStock:F3}.";
        isError = false;
    }

    async Task ResetInputsAndFocus()
    {
        scannedBarcode = "";
        caseQuantity = null;
        packQuantity = null;
        StateHasChanged();
        await caseQuantityInput.FocusAsync();
    }
}
