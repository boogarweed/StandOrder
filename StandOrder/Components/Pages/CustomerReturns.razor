@rendermode InteractiveServer
@page "/customer-returns"
@using StandOrder.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using System.Text
@using System.Collections.Concurrent
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Customer Returns</h3>

<div class="p-3">
    <EditForm Model="@order" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="form-group mb-2">
            <label>Customer:</label>
            <select class="form-control" @bind="selectedCustomerId" disabled="@(isBusy || draftReturnId != null)">
                <option value="">-- Select Customer --</option>
                @foreach (var c in customers)
                {
                    <option value="@c.ID">@c.Name</option>
                }
            </select>
        </div>

        <div class="form-group mb-2">
            <label>Order Type:</label>
            <InputRadioGroup @bind-Value="order.TypeOrder">
                <InputRadio Value=@("Case") /> Case
                <InputRadio Value=@("Broken") /> Broken
                <InputRadio Value=@("Piece") /> Piece
            </InputRadioGroup>
            <ValidationMessage For="@(() => order.TypeOrder)" class="text-danger" />
        </div>

        <div class="form-group mb-2">
            <label>Quantity Returned:</label>
            <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
        </div>

        <div class="form-group mb-3">
            <label>Scan Barcode:</label>
            <input class="form-control"
                   @ref="barcodeInput"
                   @onkeydown="HandleScannerInput"
                   @onkeydown:preventDefault="true" />
            @if (QueuedScanCount > 0)
            {
                <small class="form-text text-muted">Processing... (@QueuedScanCount in queue)</small>
            }
        </div>

        <h4>Returned Items</h4>
        <ul class="list-group mb-3">
            @foreach (var item in returnDetails)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="d-flex flex-column">
                        <span class="fw-bold">@item.ProductName</span>
                        <small class="text-muted">ID: @item.ProductID</small>
                    </div>
                    <div>
                        <span class="badge bg-warning text-dark rounded-pill me-2">
                            @item.QuantityReturned
                        </span>
                        <button type="button" class="btn btn-sm btn-danger"
                                @onclick="() => RemoveProduct(item)" disabled="@isBusy">
                            Remove
                        </button>
                    </div>
                </li>
            }
        </ul>

        <button type="submit" class="btn btn-success" disabled="@isBusy">
            Submit Return
        </button>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @(isError ? "alert-danger" : "alert-info") mt-3">@statusMessage</div>
}

@if (showProductSelectionModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Multiple Products Found</h5>
                    <button type="button" class="btn-close" @onclick="CancelProductSelection" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please select the correct product for barcode '<strong>@scannedBarcode</strong>':</p>
                    <div class="list-group">
                        @foreach (var product in productsForSelection)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectProductFromModal(product)">
                                @product.ProductName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script>
    window.standOrderStorage = {
      getCustomerReturnId: () => localStorage.getItem('customerReturnId'),
      setCustomerReturnId: (id) => localStorage.setItem('customerReturnId', id),
      clearCustomerReturnId: () => localStorage.removeItem('customerReturnId')
    };

    window.clearBarcodeInput = (el) => { if(el) { el.value = ''; } };
</script>

@code {
    // Local ViewModel for display purposes
    public class CustomerReturnDetailViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityReturned { get; set; }
    }

    // DTO for dropdown binding
    private class CustomerDto
    {
        public int ID { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class OrderInput
    {
        [Required(ErrorMessage = "Please select a Return Type.")]
        public string? TypeOrder { get; set; }
    }

    // Component State
    List<CustomerDto> customers = new();
    int? selectedCustomerId;
    OrderInput order = new();
    string scannedBarcode = string.Empty;
    int currentQuantity = 1;
    List<CustomerReturnDetailViewModel> returnDetails = new();
    ElementReference barcodeInput;
    string statusMessage = string.Empty;
    bool isBusy = false;
    bool isError = false;
    int? draftReturnId;
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();
    StringBuilder _scanBuffer = new();

    // --- Queueing and Background Processing State ---
    private readonly ConcurrentQueue<(string Barcode, int Quantity)> _scanQueue = new();
    private readonly CancellationTokenSource _cts = new();
    private Task? _processingTask;
    private SemaphoreSlim _signal = new SemaphoreSlim(0);
    private (string Barcode, int Quantity)? _pendingSelectionScan;
    public int QueuedScanCount => _scanQueue.Count;

    // <-- ADD THIS HELPER METHOD -->
    private async Task PlaySoundAsync(string soundFile)
    {
        await JS.InvokeVoidAsync("audioPlayer.play", soundFile);
    }

    protected override async Task OnInitializedAsync()
    {
        await using var db = DbFactory.CreateDbContext();
        customers = await db.Customers
            .Where(c => c.FullName != null)
            .OrderBy(c => c.FullName)
            .Select(c => new CustomerDto { ID = c.CustomerID, Name = c.FullName! })
            .ToListAsync();

        // Start the background processing task
        _processingTask = ProcessScanQueueAsync(_cts.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();
            var stored = await JS.InvokeAsync<string>("standOrderStorage.getCustomerReturnId");
            if (int.TryParse(stored, out var oid))
            {
                isBusy = true;
                await InvokeAsync(StateHasChanged);
                try { await LoadDraftReturn(oid); }
                finally
                {
                    isBusy = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task LoadDraftReturn(int returnId)
    {
        await using var db = DbFactory.CreateDbContext();
        var draftReturn = await db.OrdersTakens.AsNoTracking().FirstOrDefaultAsync(o => o.OrdersTakenID == returnId);
        if (draftReturn != null && draftReturn.Status == "Draft-Return")
        {
            draftReturnId = returnId;
            selectedCustomerId = draftReturn.CustomerID;
            order.TypeOrder = draftReturn.TypeOrder;

            var detailData = await db.OrdersTakenDetails.AsNoTracking()
                .Where(d => d.OrdersTakenID == returnId)
                .Join(db.Products, d => d.ProductID, p => p.ProductID, (d, p) => new { d.ProductID, p.ProductName, d.QuantityOrdered })
                .ToListAsync();

            returnDetails = detailData.Select(d => new CustomerReturnDetailViewModel
            {
                ProductID = d.ProductID,
                ProductName = d.ProductName ?? "[Product Not Found]",
                QuantityReturned = Math.Abs(d.QuantityOrdered)
            }).ToList();
        }
        else
        {
            await JS.InvokeVoidAsync("standOrderStorage.clearCustomerReturnId");
        }
    }

    private async Task HandleScannerInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var code = _scanBuffer.ToString();
            _scanBuffer.Clear();
            await JS.InvokeVoidAsync("clearBarcodeInput", barcodeInput);

            if (string.IsNullOrWhiteSpace(code)) return;

            if (selectedCustomerId == null)
            {
                statusMessage = "Please select a customer before scanning.";
                isError = true;
                await PlaySoundAsync("sounds/error.mp3"); // <-- ADD THIS LINE
                return;
            }

            if (string.IsNullOrEmpty(order.TypeOrder))
            {
                statusMessage = "Please select a Return Type (Case, Broken, or Piece) before scanning.";
                isError = true;
                await PlaySoundAsync("sounds/error.mp3");
                StateHasChanged();
                return;
            }

            _scanQueue.Enqueue((code, currentQuantity));
            _signal.Release();

            ResetForNextScan();
            await barcodeInput.FocusAsync();
        }
        else if (e.Key.Length == 1)
        {
            _scanBuffer.Append(e.Key);
        }
    }

    private async Task ProcessScanQueueAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await _signal.WaitAsync(token);
            if (token.IsCancellationRequested) break;

            while (_scanQueue.TryDequeue(out var scan))
            {
                isBusy = true;
                isError = false;
                await InvokeAsync(StateHasChanged);
                try { await ProcessSingleReturn(scan); }
                catch (Exception ex)
                {
                    statusMessage = $"Error processing {scan.Barcode}: {ex.Message}";
                    isError = true;
                }
                finally
                {
                    // The UI is "busy" if the modal is showing. Otherwise, it's not.
                    isBusy = showProductSelectionModal;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task ProcessSingleReturn((string Barcode, int Quantity) scan)
    {
        statusMessage = "";
        scannedBarcode = scan.Barcode;

        if (draftReturnId == null)
        {
            await CreateDraftReturnAsync();
        }

        await using var db = DbFactory.CreateDbContext();
        var year = DateTime.Now.Year.ToString();
        var matchingProducts = await (
            from b in db.Barcodes
            join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
            where b.BarCode == scan.Barcode && p.ProductYear == year
            select p
        ).ToListAsync();

        if (matchingProducts.Count == 1)
        {
            await AddProductToReturn(matchingProducts.First(), scan.Quantity);
        }
        // ▼▼▼▼▼ ANNOTATED CHANGE START ▼▼▼▼▼
        else if (matchingProducts.Count > 1)
        {
            var firstUIN = matchingProducts.First().UniversalItemNumber;

            bool allHaveSameUIN = matchingProducts.All(p => p.UniversalItemNumber == firstUIN);

            if (allHaveSameUIN)
            {
                await AddProductToReturn(matchingProducts.First(), scan.Quantity);
            }
            else
            {
                _pendingSelectionScan = scan;
                productsForSelection = matchingProducts;
                showProductSelectionModal = true;
                await PlaySoundAsync("sounds/attention.mp3");
            }
        }
        // ▲▲▲▲▲ ANNOTATED CHANGE END ▲▲▲▲▲
        // else if (matchingProducts.Count > 1)
        // {
        //     _pendingSelectionScan = scan;
        //     productsForSelection = matchingProducts;
        //     showProductSelectionModal = true;
        //     await PlaySoundAsync("sounds/attention.mp3"); // <-- ADD THIS LINE
        // }
        else
        {
            statusMessage = $"Product not found for '{scan.Barcode}'.";
            isError = true;
            await PlaySoundAsync("sounds/error.mp3"); // <-- ADD THIS LINE
        }
    }

    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        if (_pendingSelectionScan.HasValue)
        {
            await AddProductToReturn(product, _pendingSelectionScan.Value.Quantity);
            _pendingSelectionScan = null;
        }
        isBusy = false;
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        _pendingSelectionScan = null;
        isBusy = false;
        statusMessage = "Scan canceled.";
        isError = false;
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CreateDraftReturnAsync()
    {
        await using var db = DbFactory.CreateDbContext();
        var customer = await db.Customers.FindAsync(selectedCustomerId!.Value);
        var entity = new OrdersTaken
        {
            CustomerID = selectedCustomerId.Value,
            Status = "Draft-Return",
            OrderYear = DateTime.Now.Year.ToString(),
            TypeOrder = order.TypeOrder,
            LastName = customer?.FullName,
            TimeTaken = DateTime.Now
        };

        db.OrdersTakens.Add(entity);
        await db.SaveChangesAsync();

        draftReturnId = entity.OrdersTakenID;
        await JS.InvokeVoidAsync("standOrderStorage.setCustomerReturnId", draftReturnId.Value);
    }

    async Task AddProductToReturn(Product product, int quantityToReturn)
    {
        await using var db = DbFactory.CreateDbContext();
        db.Products.Attach(product);

        decimal quantityToAdjust = order.TypeOrder switch
        {
            "Broken" => (decimal)quantityToReturn / (product.PacksPerCase > 0 ? product.PacksPerCase.Value : 1),
            "Case" => quantityToReturn,
            _ => 0 // "Piece" does not affect stock
        };

        product.QtyInStock += quantityToAdjust;

        var existing = returnDetails.FirstOrDefault(x => x.ProductID == product.ProductID);
        if (existing != null)
        {
            existing.QuantityReturned += quantityToReturn;
            returnDetails.Remove(existing);
            returnDetails.Insert(0, existing);
            await db.Database.ExecuteSqlInterpolatedAsync($"UPDATE OrdersTakenDetails SET QuantityOrdered = {-existing.QuantityReturned}, QuantityPulled = {-existing.QuantityReturned} WHERE OrdersTakenID = {draftReturnId} AND ProductID = {product.ProductID}");
            statusMessage = $"Updated {product.ProductName ?? "[No Name]"}: qty {existing.QuantityReturned}";
        }
        else
        {
            var newItem = new CustomerReturnDetailViewModel { ProductID = product.ProductID, ProductName = product.ProductName ?? "[No Name]", QuantityReturned = quantityToReturn };
            returnDetails.Insert(0, newItem);
            await db.Database.ExecuteSqlInterpolatedAsync($"INSERT INTO OrdersTakenDetails (OrdersTakenID, ProductID, QuantityOrdered, QuantityPulled) VALUES ({draftReturnId}, {product.ProductID}, {-quantityToReturn}, {-quantityToReturn})");
            statusMessage = $"Added {product.ProductName ?? "[No Name]"}";
        }
        isError = false;
        await db.SaveChangesAsync();
    }

    void ResetForNextScan()
    {
        scannedBarcode = "";
        currentQuantity = 1;
    }

    async Task RemoveProduct(CustomerReturnDetailViewModel item)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            await using var db = DbFactory.CreateDbContext();
            var product = await db.Products.FindAsync(item.ProductID);
            if (product != null)
            {
                decimal quantityToReverse = order.TypeOrder switch
                {
                    "Broken" => (decimal)item.QuantityReturned / (product.PacksPerCase > 0 ? product.PacksPerCase.Value : 1),
                    "Case" => item.QuantityReturned,
                    _ => 0
                };
                product.QtyInStock -= quantityToReverse;
                await db.SaveChangesAsync();
            }
            returnDetails.Remove(item);
            if (draftReturnId != null)
            {
                await db.Database.ExecuteSqlInterpolatedAsync($"DELETE FROM OrdersTakenDetails WHERE OrdersTakenID = {draftReturnId} AND ProductID = {item.ProductID}");
            }
        }
        finally { isBusy = false; }
    }

    async Task HandleSubmit()
    {
        if (draftReturnId == null)
        {
            statusMessage = "No return started. Please scan an item.";
            isError = true;
            return;
        }

        isBusy = true;
        await using var db = DbFactory.CreateDbContext();
        var entityToUpdate = await db.OrdersTakens.FindAsync(draftReturnId.Value);
        if (entityToUpdate != null)
        {
            entityToUpdate.Status = "Return";
            await db.SaveChangesAsync();
            statusMessage = $"Return saved (ID: {draftReturnId.Value})";
            isError = false;
        }

        await JS.InvokeVoidAsync("standOrderStorage.clearCustomerReturnId");
        draftReturnId = null;
        selectedCustomerId = null;
        order = new OrderInput();
        returnDetails.Clear();
        ResetForNextScan();
        isBusy = false;
        await barcodeInput.FocusAsync();
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _signal.Release();
        if (_processingTask != null)
        {
            await _processingTask;
        }
        _cts.Dispose();
        _signal.Dispose();
    }
}