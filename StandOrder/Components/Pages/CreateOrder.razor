@rendermode InteractiveServer
@page "/showroom-order"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Collections.Concurrent
@inject MyAppDbContext db
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Showroom Order</h3>

<EditForm Model="@order" OnValidSubmit="HandleSubmit">

    <div class="form-group">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
    </div>

    <div class="form-group">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @ref="barcodeInput"
               @onkeydown="HandleScannerInput"
               @onkeydown:preventDefault="true" />
        @if (QueuedScanCount > 0)
        {
            <small class="form-text text-muted">Processing... (@QueuedScanCount in queue)</small>
        }
    </div>

    <h4 class="mt-3">Order Items</h4>
    <ul class="list-group mb-3">
        @foreach (var item in orderDetails)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex flex-column">
                    <span class="fw-bold">@item.ProductName</span>
                    <small class="text-muted">ID: @item.ProductID</small>
                </div>
                <div>
                    <span class="badge bg-primary rounded-pill me-2">
                        @item.QuantityOrdered
                    </span>
                    <button type="button" class="btn btn-sm btn-danger"
                            @onclick="() => RemoveProduct(item)" disabled="@isBusy">
                        Remove
                    </button>
                </div>
            </li>
        }
    </ul>

    <button type="submit" class="btn btn-success" disabled="@isBusy">Submit Order</button>
</EditForm>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusMessageClass mt-3">@statusMessage</div>
}

@if (showProductSelectionModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Multiple Products Found</h5>
                    <button type="button" class="btn-close" @onclick="CancelProductSelection" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please select the correct product for barcode '<strong>@scannedBarcode</strong>':</p>
                    <div class="list-group">
                        @foreach (var product in productsForSelection)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectProductFromModal(product)">
                                @product.ProductName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script>
    window.standOrderStorage = {
      getShowroomOrderId: () => localStorage.getItem('showroomOrderId'),
      setShowroomOrderId: (id) => localStorage.setItem('showroomOrderId', id),
      clearShowroomOrderId: () => localStorage.removeItem('showroomOrderId')
    };

    window.clearBarcodeInput = (el) => { if(el) { el.value = ''; } };
</script>

@code {
    // Local ViewModel for display purposes
    public class OrderDetailViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityOrdered { get; set; }
    }

    // Form model with defaults
    public class OrderInput
    {
        public string TypeOrder { get; set; } = "Broken";
        public string EmailAddress { get; set; } = "snodgrass.devin@yahoo.com";
        public string PhoneNumber { get; set; } = "405-795-2858";
        public DateTime? PickUpTime { get; set; } = DateTime.Now;
        public string LastName { get; set; } = "SHOWROOM";
    }

    OrderInput order = new();
    List<OrderDetailViewModel> orderDetails = new();
    string scannedBarcode = ""; // Now used for modal display
    int currentQuantity = 1;
    string statusMessage = "";
    string statusMessageClass = "alert-info";
    bool isBusy = false; // Represents the background processor state

    // Draft-order tracking
    int? draftOrderId;

    // State for handling multiple products
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();
    StringBuilder _scanBuffer = new();
    ElementReference barcodeInput;

    // --- Queueing and Background Processing State ---
    private readonly ConcurrentQueue<(string Barcode, int Quantity)> _scanQueue = new();
    private readonly CancellationTokenSource _cts = new();
    private Task? _processingTask;
    private SemaphoreSlim _signal = new SemaphoreSlim(0);
    private (string Barcode, int Quantity)? _pendingSelectionScan; // Hold scan data while modal is shown
    public int QueuedScanCount => _scanQueue.Count;
    // --- End of New State ---

    protected override void OnInitialized()
    {
        // Start the background processing task
        _processingTask = ProcessScanQueueAsync(_cts.Token);
    }

    // Auto-focus and load draft on start
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();

            var stored = await JS.InvokeAsync<string>("standOrderStorage.getShowroomOrderId");
            if (int.TryParse(stored, out var oid))
            {
                isBusy = true;
                StateHasChanged();
                try
                {
                    draftOrderId = oid;
                    var detailData = await db.OrdersTakenDetails
                        .AsNoTracking()
                        .Where(d => d.OrdersTakenID == oid)
                        .Select(d => new { d.ProductID, d.QuantityOrdered })
                        .ToListAsync();

                    var newOrderDetails = new List<OrderDetailViewModel>();
                    foreach (var detail in detailData)
                    {
                        var product = await db.Products
                            .AsNoTracking()
                            .FirstOrDefaultAsync(p => p.ProductID == detail.ProductID);

                        newOrderDetails.Add(new OrderDetailViewModel
                        {
                            ProductID = detail.ProductID,
                            ProductName = product?.ProductName ?? "[Product Not Found]",
                            QuantityOrdered = detail.QuantityOrdered
                        });
                    }
                    orderDetails = newOrderDetails;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"A critical error occurred while loading draft order {oid}: {ex}");
                    statusMessage = "A critical error occurred loading the draft order. Please clear the draft from your browser's local storage and try again.";
                }
                finally
                {
                    isBusy = false;
                    StateHasChanged();
                }
            }
        }
    }

    /// <summary>
    /// This handler is now extremely fast. It buffers keys and queues the scan on 'Enter'.
    /// </summary>
    private async Task HandleScannerInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var code = _scanBuffer.ToString();
            _scanBuffer.Clear();
            await JS.InvokeVoidAsync("clearBarcodeInput", barcodeInput);

            if (string.IsNullOrWhiteSpace(code)) return;

            // 1. Add scan data to the queue
            _scanQueue.Enqueue((code, currentQuantity));

            // 2. Wake up the background processor
            _signal.Release();

            // 3. Reset UI for the next scan immediately
            ResetForNextScan();
            await barcodeInput.FocusAsync();
        }
        else if (e.Key.Length == 1)
        {
            _scanBuffer.Append(e.Key);
        }
    }

    /// <summary>
    /// Background task that processes scans from the queue one by one.
    /// </summary>
    private async Task ProcessScanQueueAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await _signal.WaitAsync(token);
            if (token.IsCancellationRequested) break;

            while (_scanQueue.TryDequeue(out var scan))
            {
                isBusy = true;
                await InvokeAsync(StateHasChanged);

                try
                {
                    await ProcessSingleScan(scan);
                }
                catch (Exception ex)
                {
                    statusMessage = $"Error processing {scan.Barcode}: {ex.Message}";
                    statusMessageClass = "alert-danger";
                }
                finally
                {
                    // Only un-busy the UI if we are not waiting for modal input
                    if (!showProductSelectionModal)
                    {
                        isBusy = false;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains the original database logic, now called by the background processor.
    /// </summary>
    private async Task ProcessSingleScan((string Barcode, int Quantity) scan)
    {
        statusMessage = "";
        scannedBarcode = scan.Barcode; // Store for modal display if needed

        if (draftOrderId == null)
        {
            await CreateDraftOrderAsync();
        }

        var year = DateTime.Now.Year.ToString();
        var matchingProducts = await (
            from b in db.Barcodes
            join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
            where b.BarCode == scan.Barcode && p.ProductYear == year
            select p
        ).ToListAsync();

        if (matchingProducts.Count == 1)
        {
            await AddProductToOrder(matchingProducts.First(), scan.Quantity);
        }
        else if (matchingProducts.Count > 1)
        {
            _pendingSelectionScan = scan;
            productsForSelection = matchingProducts;
            showProductSelectionModal = true;
            // The UI will be un-busied by the modal's actions
        }
        else
        {
            statusMessage = $"Product not found for '{scan.Barcode}'.";
            statusMessageClass = "alert-warning";
        }
    }

    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        if (_pendingSelectionScan.HasValue)
        {
            await AddProductToOrder(product, _pendingSelectionScan.Value.Quantity);
            _pendingSelectionScan = null;
        }
        isBusy = false; // Un-busy the UI now
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        _pendingSelectionScan = null;
        isBusy = false; // Un-busy the UI now
        statusMessage = "Scan canceled.";
        statusMessageClass = "alert-info";
        await InvokeAsync(StateHasChanged);
        await barcodeInput.FocusAsync();
    }

    async Task CreateDraftOrderAsync()
    {
        var entity = new OrdersTaken
        {
            CustomerID = 845, // Hardcoded as in original
            Status = "Draft",
            OrderYear = DateTime.Now.Year.ToString(),
            TypeOrder = order.TypeOrder,
            EmailAddress = order.EmailAddress,
            PhoneNumber = order.PhoneNumber,
            PickUpTime = order.PickUpTime,
            LastName = order.LastName,
            TimeTaken = DateTime.Now
        };

        db.OrdersTaken.Add(entity);
        await db.SaveChangesAsync();

        draftOrderId = entity.OrdersTakenID;
        await JS.InvokeVoidAsync("standOrderStorage.setShowroomOrderId", draftOrderId.Value);
    }

    async Task AddProductToOrder(Product product, int quantityToAdd)
    {
        var existing = orderDetails.FirstOrDefault(x => x.ProductID == product.ProductID);
        if (existing != null)
        {
            existing.QuantityOrdered += quantityToAdd;
            orderDetails.Remove(existing);
            orderDetails.Insert(0, existing);
            await db.Database.ExecuteSqlRawAsync(
                "UPDATE OrdersTakenDetails SET QuantityOrdered = {0} WHERE OrdersTakenID = {1} AND ProductID = {2}",
                existing.QuantityOrdered,
                draftOrderId,
                product.ProductID
            );
            statusMessage = $"Updated {product.ProductName ?? "[No Name]"}: qty {existing.QuantityOrdered}";
            statusMessageClass = "alert-success";
        }
        else
        {
            orderDetails.Insert(0, new OrderDetailViewModel
            {
                ProductID = product.ProductID,
                ProductName = product.ProductName ?? "[No Name]",
                QuantityOrdered = quantityToAdd
            });

            await db.Database.ExecuteSqlRawAsync(
                "INSERT INTO OrdersTakenDetails (OrdersTakenID, ProductID, QuantityOrdered) VALUES ({0}, {1}, {2})",
                draftOrderId.Value,
                product.ProductID,
                quantityToAdd
            );
            statusMessage = $"Added {product.ProductName ?? "[No Name]"}";
            statusMessageClass = "alert-success";
        }
    }

    void ResetForNextScan()
    {
        scannedBarcode = "";
        currentQuantity = 1;
    }

    async Task RemoveProduct(OrderDetailViewModel item)
    {
        if (isBusy) return;
        isBusy = true;
        try
        {
            orderDetails.Remove(item);
            if (draftOrderId != null)
            {
                await db.Database.ExecuteSqlRawAsync(
                    "DELETE FROM OrdersTakenDetails WHERE OrdersTakenID = {0} AND ProductID = {1}",
                    draftOrderId,
                    item.ProductID
                );
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task HandleSubmit()
    {
        if (draftOrderId == null)
        {
            statusMessage = "No order started. Please scan an item.";
            return;
        }

        var entityToUpdate = new OrdersTaken { OrdersTakenID = draftOrderId.Value };
        db.OrdersTaken.Attach(entityToUpdate);
        entityToUpdate.Status = "Taken";
        await db.SaveChangesAsync();

        statusMessage = $"Order saved (ID: {draftOrderId.Value})";

        await JS.InvokeVoidAsync("standOrderStorage.clearShowroomOrderId");
        draftOrderId = null;
        order = new OrderInput();
        orderDetails.Clear();
        ResetForNextScan();
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _signal.Release(); // Unblock the waiting task so it can see the cancellation
        if (_processingTask != null)
        {
            await _processingTask;
        }
        _cts.Dispose();
        _signal.Dispose();
    }
}