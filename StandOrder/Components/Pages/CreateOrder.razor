@rendermode InteractiveServer
@page "/"
@page "/showroom-order"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using System.Text
@using Microsoft.EntityFrameworkCore
@inject MyAppDbContext db
@inject IJSRuntime JS

<h3>Showroom Order</h3>

<EditForm Model="@order" OnValidSubmit="HandleSubmit">

    <!-- Quantity first -->
    <div class="form-group">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="currentQuantity" />
    </div>

    <!-- Then Barcode -->
    <div class="form-group">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @ref="barcodeInput"
               @onkeydown="HandleScannerKeyDown" 
               @onkeydown:preventDefault="true" />
    </div>

    <!-- Order items list -->
    <h4 class="mt-3">Order Items</h4>
    <ul class="list-group mb-3">
        @foreach (var item in orderDetails)
        {
            <li class="list-group-item d-flex align-items-center">
                <div>@item.ProductID</div>
                <span class="badge bg-primary rounded-pill ms-auto">
                    @item.QuantityOrdered
                </span>
                <button class="btn btn-sm btn-danger ms-2"
                        @onclick="() => RemoveProduct(item)">
                    Remove
                </button>
            </li>
        }
    </ul>

    <button type="submit" class="btn btn-success">Submit Order</button>
</EditForm>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

<!-- Inline script to clear the input’s value -->
<script>
  window.clearBarcodeInput = (el) => { el.value = ''; }
</script>

@code {
    // Form model with defaults
    public class OrderInput
    {
        public string TypeOrder    { get; set; } = "Broken";
        public string EmailAddress { get; set; } = "snodgrass.devin@yahoo.com";
        public string PhoneNumber  { get; set; } = "405-795-2858";
        public DateTime? PickUpTime{ get; set; } = DateTime.Now;
        public string LastName     { get; set; } = "SHOWROOM";
    }

    OrderInput order = new();
    List<OrdersTakenDetails> orderDetails = new();
    string scannedBarcode = "";
    int currentQuantity = 1;
    string statusMessage = "";

    ElementReference barcodeInput;
    StringBuilder _scanBuffer = new();

    // Auto-focus on load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await barcodeInput.FocusAsync();
    }

    async Task HandleScannerKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Scanner finished sending the code
            scannedBarcode = _scanBuffer.ToString();
            _scanBuffer.Clear();

            await JS.InvokeVoidAsync("clearBarcodeInput", barcodeInput);

            await AddProduct();
        }
        else if (e.Key.Length == 1)
        {
            // Append any single-char keys (letters, digits, symbols)
            _scanBuffer.Append(e.Key);
        }
        // ignore other keys (Shift, Ctrl, etc.)

        // keep focus:
        // await Task.Yield();
        await barcodeInput.FocusAsync();
    }

    async Task AddProduct()
    {
        var code = (scannedBarcode ?? "").Trim();
        var year = DateTime.Now.Year.ToString();

        var product = await (
            from b in db.Barcodes
            join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
            where b.BarCode == code
               && p.ProductYear == year
            select p
        ).FirstOrDefaultAsync();

        if (product != null)
        {
            var existing = orderDetails.FirstOrDefault(x => x.ProductID == product.ProductID);
            if (existing != null)
            {
                existing.QuantityOrdered += currentQuantity;
                statusMessage = $"Updated {product.ProductName} - {product.ProductID}: qty {existing.QuantityOrdered}";
            }
            else
            {
                orderDetails.Add(new OrdersTakenDetails
                {
                    ProductID       = product.ProductID,
                    QuantityOrdered = currentQuantity
                });
                statusMessage = $"Added {product.ProductName} - {product.ProductID}";
            }
        }
        else
        {
            statusMessage = $"Product not found for '{code}' / {year}.";
        }

        // clear & refocus
        // scannedBarcode  = "";
        currentQuantity = 1;
        await Task.Delay(50);
        await barcodeInput.FocusAsync();
    }

    void RemoveProduct(OrdersTakenDetails item)
        => orderDetails.Remove(item);

    // Manual save logic
    async Task HandleSubmit()
    {
        var entity = new OrdersTaken
        {
            CustomerID         = 845,
            Status             = "Taken",
            OrderYear          = DateTime.Now.Year.ToString(),
            TypeOrder          = order.TypeOrder,
            EmailAddress       = order.EmailAddress,
            PhoneNumber        = order.PhoneNumber,
            PickUpTime         = order.PickUpTime,
            LastName           = order.LastName,
            TimeTaken          = DateTime.Now,
            OrdersTakenDetails = orderDetails.ToList()
        };

        db.OrdersTaken.Add(entity);
        await db.SaveChangesAsync();

        statusMessage = $"Order saved (ID: {entity.OrdersTakenID})";
        order = new OrderInput();
        orderDetails.Clear();
    }
}
