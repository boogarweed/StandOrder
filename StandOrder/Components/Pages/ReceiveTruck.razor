@rendermode InteractiveServer
@page "/receive-truck"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@inject MyAppDbContext db
@inject IJSRuntime JS

<h3>Receive Truck</h3>

<div class="p-3">
    <!-- Supplier selector -->
    <div class="form-group mb-2">
        <label>Supplier:</label>
        <select class="form-control" @bind="selectedSupplierId" disabled="@isBusy">
            <option value="">-- Select supplier --</option>
            @foreach (var sup in suppliers)
            {
                <option value="@sup.SupplierID">@sup.SupplierName</option>
            }
        </select>
    </div>

    <!-- Date received -->
    <div class="form-group mb-3">
        <label>Date Received:</label>
        <InputDate class="form-control" @bind-Value="receivedDate" disabled="@isBusy" />
    </div>

    <!-- Quantity -->
    <div class="form-group mb-2">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
    </div>

    <!-- Barcode scan -->
    <div class="form-group mb-3">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @bind="scannedBarcode"
               @bind:event="oninput"
               @onkeydown="HandleBarcodeKeyDown"
               @ref="barcodeInput"
               disabled="@isBusy" />
    </div>

    <!-- Items list -->
    <h4 class="mt-3">Received Items</h4>
    <ul class="list-group mb-3">
        @foreach (var item in receivedProducts)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex flex-column">
                    <span class="fw-bold">@item.ProductName</span>
                    <small class="text-muted">ID: @item.ProductID</small>
                </div>
                <div>
                    <span class="badge bg-primary rounded-pill me-2">
                        @item.QuantityReceived
                    </span>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => RemoveReceived(item)" disabled="@isBusy">
                        Remove
                    </button>
                </div>
            </li>
        }
    </ul>

    <!-- Submit -->
    <button class="btn btn-success" @onclick="HandleSubmit" disabled="@isBusy">
        Submit Receipt
    </button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

@code {
    // Loaded once 
    List<Supplier> suppliers = new();
    int? selectedSupplierId;
    DateTime receivedDate = DateTime.Now;

    // Scanning state
    string scannedBarcode = "";
    int currentQuantity = 1;
    ElementReference barcodeInput;
    bool isBusy = false; // Flag to prevent concurrent operations

    // Draft-truck tracking
    int? draftTruckId;
    List<ReceivedProductViewModel> receivedProducts = new(); // Using a view model to avoid name conflicts
    string statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        suppliers = await db.Suppliers.OrderBy(s => s.SupplierName).ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();

            var stored = await JS.InvokeAsync<string>("standOrderStorage.getTruckId");
            if (int.TryParse(stored, out var tid))
            {
                isBusy = true;
                StateHasChanged();

                try
                {
                    draftTruckId = tid;
                    var truck = await db.Trucks.FindAsync(tid);
                    if (truck != null)
                    {
                        selectedSupplierId = truck.SupplierID;
                        receivedDate = truck.ReceivedDate;

                        var details = await (from tp in db.TruckProducts
                                             join p in db.Products on tp.ProductID equals p.ProductID
                                             where tp.TruckID == tid
                                             select new ReceivedProductViewModel // Project into the view model
                                             {
                                                 ProductID = tp.ProductID,
                                                 ProductName = p.ProductName,
                                                 QuantityReceived = tp.QuantityReceived
                                             }).ToListAsync();

                        receivedProducts = details;
                    }
                }
                finally
                {
                    isBusy = false;
                    StateHasChanged();
                }
            }
        }
    }

    async Task HandleBarcodeKeyDown(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" || isBusy)
            return;

        isBusy = true;

        try
        {
            if (selectedSupplierId == null)
            {
                statusMessage = "Please select a supplier before scanning.";
                return;
            }

            var code = (scannedBarcode ?? "").Trim();
            if (!string.IsNullOrEmpty(code))
            {
                if (draftTruckId == null)
                {
                    statusMessage = "";
                    await CreateDraftTruckAsync();
                }

                var product = await (
                    from b in db.Barcodes
                    join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
                    where b.BarCode == code
                       && p.ProductYear == DateTime.Now.Year.ToString()
                    select p
                ).FirstOrDefaultAsync();

                if (product != null)
                {
                    // Update Product stock level
                    product.QtyInStock += currentQuantity;

                    var existing = receivedProducts.FirstOrDefault(x => x.ProductID == product.ProductID);
                    if (existing != null)
                    {
                        existing.QuantityReceived += currentQuantity;
                        statusMessage = $"Updated {product.ProductName}: qty {existing.QuantityReceived}";

                        var dbItem = await db.TruckProducts
                            .FirstAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == product.ProductID);
                        dbItem.QuantityReceived = existing.QuantityReceived;
                    }
                    else
                    {
                        receivedProducts.Add(new ReceivedProductViewModel
                        {
                            ProductID = product.ProductID,
                            ProductName = product.ProductName,
                            QuantityReceived = currentQuantity
                        });
                        statusMessage = $"Added {product.ProductName}";

                        db.TruckProducts.Add(new TruckProducts
                        {
                            TruckID = draftTruckId.Value,
                            ProductID = product.ProductID,
                            QuantityReceived = currentQuantity
                        });
                    }
                    await db.SaveChangesAsync();
                }
                else
                {
                    statusMessage = $"Product not found for '{code}'.";
                }
            }
        }
        finally
        {
            scannedBarcode = "";
            currentQuantity = 1;
            isBusy = false;
            StateHasChanged();
            await barcodeInput.FocusAsync();
        }
    }

    async Task CreateDraftTruckAsync()
    {
        if (selectedSupplierId == null)
            throw new InvalidOperationException("Must select supplier before scanning.");

        var truck = new Truck
        {
            SupplierID = selectedSupplierId.Value,
            ReceivedDate = receivedDate.Date
        };
        db.Trucks.Add(truck);
        await db.SaveChangesAsync();

        draftTruckId = truck.TruckID;
        await JS.InvokeVoidAsync("standOrderStorage.setTruckId", draftTruckId.Value);
    }

    async Task RemoveReceived(ReceivedProductViewModel item)
    {
        if (isBusy) return;
        isBusy = true;

        try
        {
            // Find the product to adjust its stock
            var product = await db.Products.FindAsync(item.ProductID);
            if (product != null)
            {
                product.QtyInStock -= item.QuantityReceived;
            }
            
            receivedProducts.Remove(item);
            if (draftTruckId != null)
            {
                var dbItem = await db.TruckProducts
                    .SingleOrDefaultAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == item.ProductID);

                if (dbItem != null)
                {
                    db.TruckProducts.Remove(dbItem);
                    await db.SaveChangesAsync();
                }
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task HandleSubmit()
    {
        if (draftTruckId == null)
        {
            statusMessage = "Nothing to submit.";
            return;
        }

        statusMessage = $"Truck {draftTruckId} finalized with {receivedProducts.Count} items.";

        await JS.InvokeVoidAsync("standOrderStorage.clearTruckId");

        draftTruckId = null;
        receivedProducts.Clear();
        selectedSupplierId = null;
        scannedBarcode = "";
    }

    // A view model to hold data for the UI, avoiding name conflicts with the EF entity.
    class ReceivedProductViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityReceived { get; set; }
    }
}
