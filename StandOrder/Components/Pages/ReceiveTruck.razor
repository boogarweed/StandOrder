@rendermode InteractiveServer
@page "/receive-truck"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@inject MyAppDbContext db
@inject IJSRuntime JS

<h3>Receive Truck</h3>

<div class="p-3">
    <!-- Supplier selector -->
    <div class="form-group mb-2">
        <label>Supplier:</label>
        <select class="form-control" @bind="selectedSupplierId" disabled="@isBusy">
            <option value="">-- Select supplier --</option>
            @foreach (var sup in suppliers)
            {
                <option value="@sup.SupplierID">@sup.SupplierName</option>
            }
        </select>
    </div>

    <!-- Date received -->
    <div class="form-group mb-3">
        <label>Date Received:</label>
        <InputDate class="form-control" @bind-Value="receivedDate" disabled="@isBusy" />
    </div>

    <!-- Quantity -->
    <div class="form-group mb-2">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
    </div>

    <!-- Barcode scan -->
    <div class="form-group mb-3">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @bind="scannedBarcode"
               @bind:event="oninput"
               @onkeydown="HandleBarcodeKeyDown"
               @ref="barcodeInput"
               disabled="@isBusy" />
    </div>

    <!-- Items list -->
    <h4 class="mt-3">Received Items</h4>
    <ul class="list-group mb-3">
        @foreach (var item in receivedProducts)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex flex-column">
                    <span class="fw-bold">@item.ProductName</span>
                    <small class="text-muted">ID: @item.ProductID</small>
                </div>
                <div>
                    <span class="badge bg-primary rounded-pill me-2">
                        @item.QuantityReceived
                    </span>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => RemoveReceived(item)" disabled="@isBusy">
                        Remove
                    </button>
                </div>
            </li>
        }
    </ul>

    <!-- Submit -->
    <button class="btn btn-success" @onclick="HandleSubmit" disabled="@isBusy">
        Submit Receipt
    </button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

<!-- Product Selection Modal -->
@if (showProductSelectionModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Multiple Products Found</h5>
                    <button type="button" class="btn-close" @onclick="CancelProductSelection" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Please select the correct product for barcode '<strong>@scannedBarcode</strong>':</p>
                    <div class="list-group">
                        @foreach (var product in productsForSelection)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectProductFromModal(product)">
                                @product.ProductName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!-- JavaScript functions for local storage -->
<script>
    window.standOrderStorage = {
        getTruckId: () => localStorage.getItem('truckId'),
        setTruckId: (id) => localStorage.setItem('truckId', id),
        clearTruckId: () => localStorage.removeItem('truckId')
    };
</script>


@code {
    // Loaded once
    List<Supplier> suppliers = new();
    int? selectedSupplierId;
    DateTime receivedDate = DateTime.Now;

    // Scanning state
    string scannedBarcode = "";
    int currentQuantity = 1;
    ElementReference barcodeInput;
    bool isBusy = false;

    // Draft-truck tracking
    int? draftTruckId;
    List<ReceivedProductViewModel> receivedProducts = new();
    string statusMessage = "";

    // New state for handling multiple products
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();

    protected override async Task OnInitializedAsync()
    {
        suppliers = await db.Suppliers.OrderBy(s => s.SupplierName).ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();

            var stored = await JS.InvokeAsync<string>("standOrderStorage.getTruckId");
            if (int.TryParse(stored, out var tid))
            {
                isBusy = true;
                StateHasChanged();

                try
                {
                    draftTruckId = tid;
                    var truck = await db.Trucks.FindAsync(tid);
                    if (truck != null)
                    {
                        selectedSupplierId = truck.SupplierID;
                        receivedDate = truck.ReceivedDate;

                        var details = await (from tp in db.TruckProducts
                                             join p in db.Products on tp.ProductID equals p.ProductID
                                             where tp.TruckID == tid
                                             select new ReceivedProductViewModel
                                             {
                                                 ProductID = tp.ProductID,
                                                 ProductName = p.ProductName,
                                                 QuantityReceived = tp.QuantityReceived
                                             }).ToListAsync();

                        receivedProducts = details;
                    }
                }
                finally
                {
                    isBusy = false;
                    StateHasChanged();
                }
            }
        }
    }

    async Task HandleBarcodeKeyDown(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" || isBusy)
            return;

        isBusy = true;
        StateHasChanged();

        var code = (scannedBarcode ?? "").Trim();

        try
        {
            if (selectedSupplierId == null)
            {
                statusMessage = "Please select a supplier before scanning.";
                return;
            }

            if (string.IsNullOrEmpty(code)) return;

            // Create a draft truck record if one doesn't exist for this session
            if (draftTruckId == null)
            {
                statusMessage = "";
                await CreateDraftTruckAsync();
            }

            // Find all products matching the barcode for the current year
            var matchingProducts = await (
                from b in db.Barcodes
                join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
                where b.BarCode == code
                   && p.ProductYear == DateTime.Now.Year.ToString()
                select p
            ).ToListAsync();

            if (matchingProducts.Count == 1)
            {
                await AddProductToReceipt(matchingProducts.First());
                ResetForNextScan();
            }
            else if (matchingProducts.Count > 1)
            {
                // If multiple products are found, show the selection modal
                productsForSelection = matchingProducts;
                showProductSelectionModal = true;
                // We don't reset the UI here; we wait for the modal interaction
            }
            else
            {
                statusMessage = $"Product not found for '{code}'.";
                ResetForNextScan();
            }
        }
        finally
        {
            // Only un-busy the UI if the modal is not active.
            // The modal's actions will handle the busy state.
            if (!showProductSelectionModal)
            {
                isBusy = false;
                StateHasChanged();
                await barcodeInput.FocusAsync();
            }
        }
    }

    /// <summary>
    /// Handles the user selecting a product from the modal.
    /// </summary>
    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        productsForSelection.Clear();

        try
        {
            await AddProductToReceipt(product);
        }
        finally
        {
            ResetForNextScan();
            isBusy = false;
            StateHasChanged();
            await barcodeInput.FocusAsync();
        }
    }

    /// <summary>
    /// Handles the user closing the product selection modal without choosing.
    /// </summary>
    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        productsForSelection.Clear();
        ResetForNextScan();
        isBusy = false;
        StateHasChanged();
        await barcodeInput.FocusAsync();
    }

    /// <summary>
    /// Refactored logic to add a product to the receipt.
    /// </summary>
    async Task AddProductToReceipt(Product product)
    {
        // Update Product stock level
        product.QtyInStock += currentQuantity;

        var existing = receivedProducts.FirstOrDefault(x => x.ProductID == product.ProductID);
        if (existing != null)
        {
            existing.QuantityReceived += currentQuantity;
            receivedProducts.Remove(existing);
            receivedProducts.Insert(0, existing); // Move to top
            statusMessage = $"Updated {product.ProductName}: qty {existing.QuantityReceived}";

            var dbItem = await db.TruckProducts
                .FirstAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == product.ProductID);
            dbItem.QuantityReceived = existing.QuantityReceived;
        }
        else
        {
            receivedProducts.Insert(0, new ReceivedProductViewModel
            {
                ProductID = product.ProductID,
                ProductName = product.ProductName,
                QuantityReceived = currentQuantity
            });
            statusMessage = $"Added {product.ProductName}";

            db.TruckProducts.Add(new TruckProducts
            {
                TruckID = draftTruckId.Value,
                ProductID = product.ProductID,
                QuantityReceived = currentQuantity
            });
        }
        await db.SaveChangesAsync();
    }

    /// <summary>
    /// Resets the input fields for the next scan.
    /// </summary>
    void ResetForNextScan()
    {
        scannedBarcode = "";
        currentQuantity = 1;
    }

    async Task CreateDraftTruckAsync()
    {
        if (selectedSupplierId == null)
            throw new InvalidOperationException("Must select supplier before scanning.");

        var truck = new Truck
        {
            SupplierID = selectedSupplierId.Value,
            ReceivedDate = receivedDate.Date
        };
        db.Trucks.Add(truck);
        await db.SaveChangesAsync();

        draftTruckId = truck.TruckID;
        await JS.InvokeVoidAsync("standOrderStorage.setTruckId", draftTruckId.Value);
    }

    async Task RemoveReceived(ReceivedProductViewModel item)
    {
        if (isBusy) return;
        isBusy = true;

        try
        {
            var product = await db.Products.FindAsync(item.ProductID);
            if (product != null)
            {
                product.QtyInStock -= item.QuantityReceived;
            }

            receivedProducts.Remove(item);
            if (draftTruckId != null)
            {
                var dbItem = await db.TruckProducts
                    .SingleOrDefaultAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == item.ProductID);

                if (dbItem != null)
                {
                    db.TruckProducts.Remove(dbItem);
                    await db.SaveChangesAsync();
                }
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task HandleSubmit()
    {
        if (draftTruckId == null)
        {
            statusMessage = "Nothing to submit.";
            return;
        }

        statusMessage = $"Truck {draftTruckId} finalized with {receivedProducts.Count} items.";

        await JS.InvokeVoidAsync("standOrderStorage.clearTruckId");

        draftTruckId = null;
        receivedProducts.Clear();
        selectedSupplierId = null;
        ResetForNextScan();
    }

    // A view model to hold data for the UI.
    class ReceivedProductViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityReceived { get; set; }
    }
}
