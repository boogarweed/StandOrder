@rendermode InteractiveServer
@page "/receive-truck"
@using StandOrder.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using System.Collections.Concurrent // NEW: For the thread-safe queue
@inject MyAppDbContext db
@inject IJSRuntime JS
@implements IAsyncDisposable // NEW: To safely dispose of the background task

<h3>Receive Truck</h3>

<div class="p-3">
    <div class="form-group mb-2">
        <label>Supplier:</label>
        <select class="form-control" @bind="selectedSupplierId" disabled="@isBusy">
            <option value="">-- Select supplier --</option>
            @foreach (var sup in suppliers)
            {
                <option value="@sup.SupplierID">@sup.SupplierName</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label>Date Received:</label>
        <InputDate class="form-control" @bind-Value="receivedDate" disabled="@isBusy" />
    </div>

    <div class="form-group mb-2">
        <label>Quantity:</label>
        <InputNumber class="form-control" @bind-Value="currentQuantity" disabled="@isBusy" />
    </div>

    <div class="form-group mb-3">
        <label>Scan Barcode:</label>
        <input class="form-control"
               @bind="scannedBarcode"
               @bind:event="oninput"
               @onkeydown="QueueScan"
               @ref="barcodeInput" />
        @if (QueuedScanCount > 0)
        {
            <small class="form-text text-muted">Processing... (@QueuedScanCount in queue)</small>
        }
    </div>

    <h4 class="mt-3">Received Items</h4>
    <ul class="list-group mb-3">
        @foreach (var item in receivedProducts)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex flex-column">
                    <span class="fw-bold">@item.ProductName</span>
                    <small class="text-muted">ID: @item.ProductID</small>
                </div>
                <div>
                    <span class="badge bg-primary rounded-pill me-2">
                        @item.QuantityReceived
                    </span>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => RemoveReceived(item)" disabled="@isBusy">
                        Remove
                    </button>
                </div>
            </li>
        }
    </ul>

    <button class="btn btn-success" @onclick="HandleSubmit" disabled="@isBusy">
        Submit Receipt
    </button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusMessageClass mt-3">@statusMessage</div>
}

@if (showProductSelectionModal)
{
    // ... modal code remains the same
}


<script>
    // ... script remains the same
</script>


@code {
    // Loaded once
    List<Supplier> suppliers = new();
    int? selectedSupplierId;
    DateTime receivedDate = DateTime.Now;

    // Scanning state
    string scannedBarcode = "";
    int currentQuantity = 1;
    ElementReference barcodeInput;
    bool isBusy = false; // Now represents the background task being busy

    // Draft-truck tracking
    int? draftTruckId;
    List<ReceivedProductViewModel> receivedProducts = new();
    string statusMessage = "";
    string statusMessageClass = "alert-info";

    // Product Selection Modal state
    bool showProductSelectionModal = false;
    List<Product> productsForSelection = new();
    private (string Barcode, int Quantity)? _pendingSelectionScan; // NEW: Hold scan data while modal is shown

    // --- NEW: Queueing and Background Processing State ---
    private readonly ConcurrentQueue<(string Barcode, int Quantity)> _scanQueue = new();
    private readonly CancellationTokenSource _cts = new();
    private Task? _processingTask;
    private SemaphoreSlim _signal = new SemaphoreSlim(0);

    public int QueuedScanCount => _scanQueue.Count;
    // --- End of New State ---

    protected override async Task OnInitializedAsync()
    {
        suppliers = await db.Suppliers.OrderBy(s => s.SupplierName).ToListAsync();

        // NEW: Start the background processing task
        _processingTask = ProcessScanQueueAsync(_cts.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barcodeInput.FocusAsync();

            // Logic to restore draft truck session is unchanged
            var stored = await JS.InvokeAsync<string>("standOrderStorage.getTruckId");
            if (int.TryParse(stored, out var tid))
            {
                // ... Existing draft-loading logic here ...
            }
        }
    }

    /// <summary>
    /// NEW: This handler is now extremely fast. It just adds the scan to a queue.
    /// </summary>
    private void QueueScan(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" || string.IsNullOrWhiteSpace(scannedBarcode))
            return;

        if (selectedSupplierId == null)
        {
            statusMessage = "Please select a supplier before scanning.";
            statusMessageClass = "alert-warning";
            return;
        }

        // 1. Add the scan data to our thread-safe queue.
        _scanQueue.Enqueue((scannedBarcode.Trim(), currentQuantity));

        // 2. Clear inputs immediately for the next scan.
        ResetForNextScan();

        // 3. "Wake up" the background processor.
        _signal.Release();

        // 4. Immediately re-focus the input. The UI is never blocked.
        _ = barcodeInput.FocusAsync();
    }

    /// <summary>
    /// NEW: This background task processes scans from the queue one by one.
    /// </summary>
    private async Task ProcessScanQueueAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            // Wait until a scan is added to the queue
            await _signal.WaitAsync(token);

            if (_scanQueue.TryDequeue(out var scan))
            {
                // A scan is available, set the busy flag and update the UI
                isBusy = true;
                await InvokeAsync(StateHasChanged);

                try
                {
                    // This is the original logic from your HandleBarcodeKeyDown method
                    await ProcessSingleScan(scan);
                }
                catch (Exception ex)
                {
                    // Handle any processing errors
                    statusMessage = $"Error processing {scan.Barcode}: {ex.Message}";
                    statusMessageClass = "alert-danger";
                }
                finally
                {
                    // Processing is done, clear the busy flag
                    isBusy = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    /// <summary>
    /// MODIFIED: Contains the original database logic, now called by the background processor.
    /// </summary>
    private async Task ProcessSingleScan((string Barcode, int Quantity) scan)
    {
        statusMessage = ""; // Clear previous messages

        if (draftTruckId == null)
        {
            await CreateDraftTruckAsync();
        }

        var matchingProducts = await (
            from b in db.Barcodes
            join p in db.Products on b.UniversalItemNumber equals p.UniversalItemNumber
            where b.BarCode == scan.Barcode && p.ProductYear == DateTime.Now.Year.ToString()
            select p
        ).ToListAsync();

        if (matchingProducts.Count == 1)
        {
            await AddProductToReceipt(matchingProducts.First(), scan.Quantity);
        }
        else if (matchingProducts.Count > 1)
        {
            // If multiple products found, show modal and pause processing
            _pendingSelectionScan = scan;
            productsForSelection = matchingProducts;
            showProductSelectionModal = true;
            await InvokeAsync(StateHasChanged); // Update UI to show modal
        }
        else
        {
            statusMessage = $"Product not found for '{scan.Barcode}'.";
            statusMessageClass = "alert-warning";
        }
    }

    async Task SelectProductFromModal(Product product)
    {
        showProductSelectionModal = false;
        if (_pendingSelectionScan.HasValue)
        {
            await AddProductToReceipt(product, _pendingSelectionScan.Value.Quantity);
            _pendingSelectionScan = null;
        }
        // No need to set isBusy = false here, the main loop handles it.
        await barcodeInput.FocusAsync();
    }

    async Task CancelProductSelection()
    {
        showProductSelectionModal = false;
        _pendingSelectionScan = null;
        statusMessage = "Scan canceled.";
        statusMessageClass = "alert-info";
        await barcodeInput.FocusAsync();
    }

    async Task AddProductToReceipt(Product product, int quantityToAdd)
    {
        // ... (rest of the code is largely the same, but uses quantityToAdd)
        product.QtyInStock += quantityToAdd;

        var existing = receivedProducts.FirstOrDefault(x => x.ProductID == product.ProductID);
        if (existing != null)
        {
            existing.QuantityReceived += quantityToAdd;
            receivedProducts.Remove(existing);
            receivedProducts.Insert(0, existing); // Move to top
            statusMessage = $"Updated {product.ProductName}: qty {existing.QuantityReceived}";
            statusMessageClass = "alert-success";

            var dbItem = await db.TruckProducts.FirstAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == product.ProductID);
            dbItem.QuantityReceived = existing.QuantityReceived;
        }
        else
        {
            receivedProducts.Insert(0, new ReceivedProductViewModel
            {
                ProductID = product.ProductID,
                ProductName = product.ProductName,
                QuantityReceived = quantityToAdd
            });
            statusMessage = $"Added {product.ProductName}";
            statusMessageClass = "alert-success";

            db.TruckProducts.Add(new TruckProducts
            {
                TruckID = draftTruckId.Value,
                ProductID = product.ProductID,
                QuantityReceived = quantityToAdd
            });
        }
        await db.SaveChangesAsync();
    }

    void ResetForNextScan()
    {
        scannedBarcode = "";
        currentQuantity = 1; // Always reset to 1
    }

    // NEW: Implement IAsyncDisposable to stop the background task gracefully
    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _signal.Release(); // Unblock the waiting task so it can see the cancellation
        if (_processingTask != null)
        {
            await _processingTask;
        }
        _cts.Dispose();
        _signal.Dispose();
    }

    async Task CreateDraftTruckAsync()
    {
        if (selectedSupplierId == null)
            throw new InvalidOperationException("Must select supplier before scanning.");

        var truck = new Truck
        {
            SupplierID = selectedSupplierId.Value,
            ReceivedDate = receivedDate.Date
        };
        db.Trucks.Add(truck);
        await db.SaveChangesAsync();

        draftTruckId = truck.TruckID;
        await JS.InvokeVoidAsync("standOrderStorage.setTruckId", draftTruckId.Value);
    }

    async Task RemoveReceived(ReceivedProductViewModel item)
    {
        if (isBusy) return;
        isBusy = true;

        try
        {
            var product = await db.Products.FindAsync(item.ProductID);
            if (product != null)
            {
                product.QtyInStock -= item.QuantityReceived;
            }

            receivedProducts.Remove(item);
            if (draftTruckId != null)
            {
                var dbItem = await db.TruckProducts
                    .SingleOrDefaultAsync(tp => tp.TruckID == draftTruckId && tp.ProductID == item.ProductID);

                if (dbItem != null)
                {
                    db.TruckProducts.Remove(dbItem);
                    await db.SaveChangesAsync();
                }
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task HandleSubmit()
    {
        if (draftTruckId == null)
        {
            statusMessage = "Nothing to submit.";
            return;
        }

        statusMessage = $"Truck {draftTruckId} finalized with {receivedProducts.Count} items.";

        await JS.InvokeVoidAsync("standOrderStorage.clearTruckId");

        draftTruckId = null;
        receivedProducts.Clear();
        selectedSupplierId = null;
        ResetForNextScan();
    }

    // A view model to hold data for the UI.
    class ReceivedProductViewModel
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public int QuantityReceived { get; set; }
    }
}
